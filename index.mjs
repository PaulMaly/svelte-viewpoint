import { SvelteComponent, init, safe_not_equal, handle_promise, empty, insert, transition_in, transition_out, detach, compute_rest_props, assign, exclude_internal_props, create_slot, update_slot, get_spread_update, get_spread_object, group_outros, destroy_component, check_outros, create_component, mount_component } from 'svelte/internal';

/* src/Viewpoint.svelte generated by Svelte v3.29.0 */

const get_error_slot_changes = dirty => ({ error: dirty & /*load, preload*/ 48 });
const get_error_slot_context = ctx => ({ error: /*error*/ ctx[15] });
const get_loading_slot_changes = dirty => ({});
const get_loading_slot_context = ctx => ({});
const get_waiting_slot_changes = dirty => ({});
const get_waiting_slot_context = ctx => ({});

// (11:0) {:catch error}
function create_catch_block(ctx) {
	let current;
	const error_slot_template = /*#slots*/ ctx[13].error;
	const error_slot = create_slot(error_slot_template, ctx, /*$$scope*/ ctx[12], get_error_slot_context);

	return {
		c() {
			if (error_slot) error_slot.c();
		},
		m(target, anchor) {
			if (error_slot) {
				error_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (error_slot) {
				if (error_slot.p && dirty & /*$$scope, load, preload*/ 4144) {
					update_slot(error_slot, error_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_error_slot_changes, get_error_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_slot, local);
			current = false;
		},
		d(detaching) {
			if (error_slot) error_slot.d(detaching);
		}
	};
}

// (7:0) {:then comp}
function create_then_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*comp*/ ctx[14] && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*comp*/ ctx[14]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*load, preload*/ 48) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (8:1) {#if comp}
function create_if_block_2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*$$restProps*/ ctx[7], /*state*/ ctx[1]];
	var switch_value = /*comp*/ ctx[14];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*$$restProps, state*/ 130)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*$$restProps*/ 128 && get_spread_object(/*$$restProps*/ ctx[7]),
					dirty & /*state*/ 2 && get_spread_object(/*state*/ ctx[1])
				])
			: {};

			if (switch_value !== (switch_value = /*comp*/ ctx[14])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (1:62)   {#if timeout && !timeoutTimer}
function create_pending_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*timeout*/ ctx[0] && !/*timeoutTimer*/ ctx[2]) return 0;
		if (!/*delayTimer*/ ctx[3]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

// (4:23) 
function create_if_block_1(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[13].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[12], get_loading_slot_context);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},
		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(loading_slot, loading_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_loading_slot_changes, get_loading_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (2:1) {#if timeout && !timeoutTimer}
function create_if_block(ctx) {
	let current;
	const waiting_slot_template = /*#slots*/ ctx[13].waiting;
	const waiting_slot = create_slot(waiting_slot_template, ctx, /*$$scope*/ ctx[12], get_waiting_slot_context);

	return {
		c() {
			if (waiting_slot) waiting_slot.c();
		},
		m(target, anchor) {
			if (waiting_slot) {
				waiting_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (waiting_slot) {
				if (waiting_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(waiting_slot, waiting_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_waiting_slot_changes, get_waiting_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(waiting_slot, local);
			current = true;
		},
		o(local) {
			transition_out(waiting_slot, local);
			current = false;
		},
		d(detaching) {
			if (waiting_slot) waiting_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let await_block_anchor;
	let promise;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 14,
		error: 15,
		blocks: [,,,]
	};

	handle_promise(promise = Promise.resolve().then(/*wait*/ ctx[6]).then(/*load*/ ctx[4]).then(/*preload*/ ctx[5]), info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*load, preload*/ 48 && promise !== (promise = Promise.resolve().then(/*wait*/ ctx[6]).then(/*load*/ ctx[4]).then(/*preload*/ ctx[5])) && handle_promise(promise, info)) ; else {
				const child_ctx = ctx.slice();
				child_ctx[14] = child_ctx[15] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["component","preloading","delay","timeout","abort"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	let { component = null } = $$props,
		{ preloading = true } = $$props,
		state = null,
		timeoutTimer,
		delayTimer,
		{ delay = 200 } = $$props,
		{ timeout = 0 } = $$props,
		{ abort = 0 } = $$props;

	function wait() {
		delay && $$invalidate(3, delayTimer = setTimeout(
			() => {
				$$invalidate(3, delayTimer = clearTimeout(delayTimer));
			},
			delay
		));

		timeout && $$invalidate(2, timeoutTimer = setTimeout(
			() => {
				$$invalidate(2, timeoutTimer = clearTimeout(timeoutTimer));
			},
			timeout
		));
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("component" in $$new_props) $$invalidate(8, component = $$new_props.component);
		if ("preloading" in $$new_props) $$invalidate(9, preloading = $$new_props.preloading);
		if ("delay" in $$new_props) $$invalidate(10, delay = $$new_props.delay);
		if ("timeout" in $$new_props) $$invalidate(0, timeout = $$new_props.timeout);
		if ("abort" in $$new_props) $$invalidate(11, abort = $$new_props.abort);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	let load;
	let preload;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*component, abort*/ 2304) {
			 $$invalidate(4, load = function () {
				return new Promise((resolve, reject) => {
						let abortTimer;

						Promise.resolve(typeof component === "function" && !(/^\s*class\s+/).test(component.toString())
						? component()
						: component).then(m => {
							clearTimeout(abortTimer); // class, not a plain function
							resolve(m);
						});

						abort && (abortTimer = setTimeout(
							() => {
								reject(new Error("Aborted by timeout."));
							},
							abort
						));
					});
			});
		}

		 $$invalidate(5, preload = function (m) {
			return m && Promise.resolve(preloading && typeof m.preload === "function"
			? m.preload($$restProps)
			: undefined).then((data = {}) => {
				$$invalidate(1, state = data);
				return m.default || m;
			});
		});
	};

	return [
		timeout,
		state,
		timeoutTimer,
		delayTimer,
		load,
		preload,
		wait,
		$$restProps,
		component,
		preloading,
		delay,
		abort,
		$$scope,
		slots
	];
}

class Viewpoint extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			component: 8,
			preloading: 9,
			delay: 10,
			timeout: 0,
			abort: 11
		});
	}
}

export default Viewpoint;
